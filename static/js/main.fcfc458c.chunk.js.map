{"version":3,"sources":["containers/news/NewsPreview.js","components/loading/LoadingSpinner.js","components/loading/LoadingContainer.js","redux/reducers/ajaxStatusReducer.js","redux/reducers/newsReducer.js","constants/constants.js","containers/NewsContainer.js","redux/actions/newsActions.js","App.js","serviceWorker.js","redux/rootReducer.js","redux/createStore.js","IntlWrapper.js","index.js"],"names":["NewsPreview","data","this","props","date","publishedAt","moment","utc","local","format","domain","source","name","className","href","url","target","rel","substring","src","urlToImage","alt","title","description","Component","LoadingSpinner","LoadingContainer","children","loading","Fragment","defaultProps","FETCH_PENDING","FETCH_COMPLETE","SERVER_ERROR","RESET_STATUS","initialState","isServerError","isLoading","serverStatus","serverMessage","FETCH_NEWS","list","keyword","page","apiKey","pageSize","NewsContainer","liveSearch","e","fetchNews","value","scrollSearch","ajaxStatus","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","_","debounce","intl","placeholder","formatMessage","id","type","onChange","length","map","it","index","key","connect","state","news","dispatch","a","constants","axios","get","response","articles","status","message","injectIntl","App","Boolean","location","hostname","match","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","IntlWrapper","lang","locales","locale","messages","textComponent","ReactDOM","render","en","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcfc458c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nexport default class NewsPreview extends Component {\n    static propTypes = {\n        data: PropTypes.object.isRequired\n    };\n\n    render() {\n        const { data } = this.props;\n        const date = data.publishedAt ? moment.utc(data.publishedAt).local().format('YYYY-MM-DD HH:mm:ss') : '';\n        const domain = data.source ? data.source.name : '';\n\n        return (\n            <div className=\"item\">\n                <a href={data.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <div className=\"item-content\">\n                        <div className=\"top\">\n                            <div className=\"avatar\">{domain.substring(0, 1)}</div>\n                            <div className=\"text\">\n                                <div className=\"domain\">{domain}</div>\n                                <div className=\"date\">{date}</div>\n                            </div>\n                        </div>\n                        <div className=\"thumbnail\">\n                            <img src={data.urlToImage || `/us-news-400x400.png`} alt={data.title} className=\"bg\"/>\n                        </div>\n                        <div className=\"content\">\n                            <div className=\"title\">{data.title}</div>\n                            <div className=\"desc\">{data.description}</div>\n                        </div>\n                    </div>\n                </a>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './loading.css';\n\nexport default class LoadingSpinner extends Component {\n    render() {\n        return (\n            <div className=\"spinner\">\n                <div className=\"bounce1\"/>\n                <div className=\"bounce2\"/>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LoadingSpinner from './LoadingSpinner';\n\nexport default class LoadingContainer extends Component {\n    static propTypes = {\n        children: PropTypes.node.isRequired,\n        loading: PropTypes.bool\n    };\n\n    static defaultProps = {\n        loading: false\n    };\n\n    render() {\n        const { children, loading } = this.props;\n        return (\n            <React.Fragment>\n                {loading ? <LoadingSpinner/> : children}\n            </React.Fragment>\n        );\n    }\n}\n","export const FETCH_PENDING = 'iLastNews/ajaxStatus/fetchPending';\nexport const FETCH_COMPLETE = 'iLastNews/ajaxStatus/fetchComplete';\nexport const SERVER_ERROR = 'iLastNews/ajaxStatus/serverError';\nexport const RESET_STATUS = 'iLastNews/ajaxStatus/resetStatus';\n\nconst initialState = {\n    isServerError: false,\n    isLoading: false,\n    serverStatus: '',\n    serverMessage: ''\n};\n\nexport default function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        case SERVER_ERROR:\n            return {\n                ...state,\n                isServerError: true,\n                isLoading: false,\n                serverStatus: action.serverStatus,\n                serverMessage: action.serverMessage\n            };\n        case FETCH_PENDING:\n            return {\n                ...state,\n                isLoading: true\n            };\n        case FETCH_COMPLETE:\n            return {\n                ...state,\n                isLoading: false,\n                isServerError: false,\n                serverStatus: ''\n            };\n        case RESET_STATUS:\n            return {\n                ...state,\n                isServerError: false,\n                isLoading: false,\n                serverStatus: '',\n                serverMessage: ''\n            };\n        default:\n            return state;\n    }\n}\n","export const FETCH_NEWS = 'iLastNews/news/fetchNews';\n\nconst initialState = {\n    list: [],\n    keyword: '',\n    page: 1\n};\n\nexport default function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        case FETCH_NEWS:\n            return {\n                ...state,\n                keyword: action.keyword,\n                page: action.page,\n                list: action.page === 1 ? [...action.list] : [...state.list, ...action.list]\n            };\n        default:\n            return state;\n    }\n}\n","export default {\n    apiKey: '77e0945f54ed47ca9bbdd75b9027ca1e', //maximums 100 record for free account key. upgrade to get more data\n    pageSize: 10\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport NewsPreview from './news/NewsPreview';\nimport LoadingContainer from '../components/loading/LoadingContainer';\nimport _ from 'lodash';\nimport { fetchNews } from '../redux/actions/newsActions';\n\nexport class NewsContainer extends Component {\n    static propTypes = {\n        intl: PropTypes.object.isRequired,\n        ajaxStatus: PropTypes.object.isRequired,\n        fetchNews: PropTypes.func.isRequired,\n        page: PropTypes.number.isRequired,\n        keyword: PropTypes.string,\n        list: PropTypes.array\n    };\n\n    static defaultProps = {\n        keyword: '',\n        list: []\n    };\n\n    liveSearch = e => {\n        this.props.fetchNews(e.target.value, 1);\n    };\n\n    scrollSearch = () => {\n        const { keyword, page, fetchNews, ajaxStatus } = this.props;\n        if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight\n            && !ajaxStatus.isLoading && page < 10 //Free account maximums 100 record for free account\n        ) {\n            fetchNews(keyword, page + 1);\n        }\n    };\n\n    componentDidMount() {\n        const { page, fetchNews } = this.props;\n        fetchNews('', page);\n\n        window.addEventListener('scroll', _.debounce(this.scrollSearch, 100));\n    }\n\n    render() {\n        const { list, intl, ajaxStatus } = this.props;\n        const placeholder = intl.formatMessage({ id: 'common.search' });\n\n        return (\n            <div className=\"page\">\n                <div className=\"header-section\">\n                    <div className=\"header-top-area\">\n                        <div className=\"header-container\">\n                            <div className=\"title\"><FormattedMessage id=\"news.title\"/></div>\n                            <div className=\"search\">\n                                <i className=\"fa fa-search\"/>\n                                <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    placeholder={placeholder}\n                                    onChange={this.liveSearch}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"header-bg\"/>\n                </div>\n                <div className=\"loaded-list\">\n                    {ajaxStatus.isServerError && ajaxStatus.serverMessage && (\n                        <div className=\"col-lg-4 col-md-6 col-sm-8 col-12 alert alert-danger\">\n                            {ajaxStatus.serverMessage}\n                        </div>\n                    )}\n                    {!ajaxStatus.isLoading && list.length === 0 && (\n                        <div className=\"col-lg-4 col-md-6 col-sm-8 col-12 alert alert-warning\">\n                            <FormattedMessage id=\"common.notFound\"/>\n                        </div>\n                    )}\n                    {list.length > 0 && (\n                        list.map((it, index) => {\n                            return (\n                                <div key={index} className=\"list-item\">\n                                    <NewsPreview data={it}/>\n                                </div>\n                            );\n                        })\n                    )}\n                </div>\n                <LoadingContainer loading={ajaxStatus.isLoading}>&nbsp;</LoadingContainer>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    ajaxStatus: state.ajaxStatus,\n    keyword: state.news.keyword,\n    page: state.news.page,\n    list: state.news.list\n});\n\nexport default connect(mapStateToProps, { fetchNews })(injectIntl(NewsContainer));\n","import { FETCH_PENDING, FETCH_COMPLETE, SERVER_ERROR } from '../reducers/ajaxStatusReducer';\nimport { FETCH_NEWS } from '../reducers/newsReducer';\nimport axios from 'axios';\nimport constants from '../../constants/constants';\n\nexport function fetchNews(keyword, page) {\n    return async dispatch => {\n        try {\n            dispatch({\n                type: FETCH_PENDING\n            });\n\n            let url = `https://newsapi.org/v2/everything?domains=washingtonpost.com,nytimes.com\n                &apiKey=${constants.apiKey}&pageSize=${constants.pageSize}&page=${page}`;\n            if (keyword) url += `&q=${keyword}`;\n\n            const response = await axios.get(url);\n\n            dispatch({\n                type: FETCH_NEWS,\n                keyword,\n                page,\n                list: response.data.articles || []\n            });\n\n            dispatch({\n                type: FETCH_COMPLETE\n            });\n        } catch (e) {\n            dispatch({\n                type: SERVER_ERROR,\n                serverStatus: e.response.status,\n                serverMessage: e.response.message\n            });\n        }\n    };\n}\n","import React from 'react';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport NewsContainer from './containers/NewsContainer';\n\nfunction App() {\n    return (\n        <NewsContainer/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport ajaxStatusReducer from './reducers/ajaxStatusReducer';\nimport newsReducer from './reducers/newsReducer';\n\nexport default combineReducers({\n    ajaxStatus: ajaxStatusReducer,\n    news: newsReducer\n})\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\nconst initialState = {};\nconst enhancers = [];\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        ...enhancers\n    )\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport { IntlProvider } from 'react-intl';\n\nfunction Fragment(props) {\n    return props.children || <span {...props}/> || null;\n}\n\nclass IntlWrapper extends Component {\n    static propTypes = {\n        lang: PropTypes.string.isRequired,\n        store: PropTypes.object.isRequired,\n        children: PropTypes.node.isRequired,\n        locales: PropTypes.shape({\n            'en': PropTypes.object\n        }).isRequired\n    };\n\n    render() {\n        const { lang, store, locales, children } = this.props;\n\n        return (\n            <Provider store={store}>\n                <IntlProvider locale={lang} messages={locales[lang]} textComponent={Fragment}>\n                    {children}\n                </IntlProvider>\n            </Provider>\n        );\n    }\n}\n\nexport default connect(null, null)(IntlWrapper);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './redux/createStore';\nimport IntlWrapper from './IntlWrapper';\nimport en from './locales/en.json';\n\nReactDOM.render(\n    <IntlWrapper store={store} locales={{ en }} lang=\"en\">\n        <App/>\n    </IntlWrapper>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}